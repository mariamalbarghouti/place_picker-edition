{
    "sourceFile": "lib/widgets/rich_suggestion.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1717693267646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1717693267646,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:place_picker/entities/entities.dart';\r\n\r\nclass RichSuggestion extends StatelessWidget {\r\n  final VoidCallback onTap;\r\n  final AutoCompleteItem autoCompleteItem;\r\n\r\n  RichSuggestion(this.autoCompleteItem, this.onTap);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Material(\r\n      child: InkWell(\r\n        child: Container(\r\n          alignment: AlignmentDirectional.centerStart,\r\n          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),\r\n          child: RichText(\r\n              text: TextSpan(\r\n            children: getStyledTexts(context),\r\n          )),\r\n        ),\r\n        onTap: onTap,\r\n      ),\r\n    );\r\n  }\r\n\r\n  List<TextSpan> getStyledTexts(BuildContext context) {\r\n    final List<TextSpan> result = [];\r\n    final style = TextStyle(color: Colors.grey, fontSize: 15);\r\n\r\n    final startText =\r\n        autoCompleteItem.text?.substring(0, autoCompleteItem.offset);\r\n    if (startText?.isNotEmpty ?? false) {\r\n      result.add(TextSpan(text: startText, style: style));\r\n    }\r\n\r\n    final boldText = autoCompleteItem.text?.substring(autoCompleteItem.offset!,\r\n        autoCompleteItem.offset! + autoCompleteItem.length!);\r\n    result.add(\r\n      TextSpan(\r\n          text: boldText,\r\n          style: style.copyWith(\r\n              color: Theme.of(context).textTheme.bodyLarge?.color)),\r\n    );\r\n\r\n    final remainingText = autoCompleteItem.text\r\n        ?.substring(autoCompleteItem.offset! + autoCompleteItem.length!);\r\n    result.add(TextSpan(text: remainingText, style: style));\r\n\r\n    return result;\r\n  }\r\n}\r\n"
        }
    ]
}